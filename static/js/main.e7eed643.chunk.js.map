{"version":3,"sources":["engine/game.js","Components/Tile.js","App.js","index.js"],"names":["Game","size","this","newBoard","Array","fill","addTile","gameState","board","score","won","over","moveCallback","winCallback","loseCallback","newGame","direction","boardAsRows","getBoardAsRows","previousBoard","combineLeftAndUp","flat","every","value","index","includes","handleWin","lastStep","combineRightAndDown","boardAsCols","getBoardAsCols","rearrangeBoardFromColsToRows","callback","push","boardString","length","chances","randomChoice","Math","floor","random","filteredBoard","reduce","allIndex","tile","currentBoard","slice","colNumber","col","rowNumber","currentRow","filter","number","combinedRow","diff","shiftLeftAndUp","row","zerosToAdd","concat","shiftRightAndDown","boardRearranged","indexOfArray","currentArray","anyOtherMoves","currentCol","tileAddedBoard","handleLose","forEach","Tile","className","renderSwitch","App","game","useState","gameModel","updateGameModel","updateBoard","updateGameState","handleReset","setupNewGame","tabIndex","onKeyDown","event","preventDefault","key","move","onClick","map","rel","target","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7eed643.chunk.js","sourcesContent":["export default class Game {\r\n\r\n    constructor(size) {\r\n        this.size = size;   // dimensions of board\r\n        let newBoard = new Array(size ** 2).fill(0);  // array representing the board\r\n\r\n        // initialize first two random tiles\r\n        newBoard = addTile(newBoard);\r\n        newBoard = addTile(newBoard);\r\n\r\n        this.gameState = {\r\n            board: newBoard,    // number[] represents the value of each tile on the board\r\n            score: 0,           // number   score of the current game\r\n            won: false,         // boolean  if user has made a 2048 tile\r\n            over: false         // boolean  if board is in state where no legal moves can be made\r\n        };\r\n\r\n        this.moveCallback = [];\r\n        this.winCallback = [];\r\n        this.loseCallback = [];\r\n    };\r\n\r\n    /**\r\n     * Resets the game back to a random starting position.\r\n     */\r\n    setupNewGame() {\r\n        let newGame = new Game(this.size);\r\n        this.gameState = {\r\n            board: newGame.gameState.board,\r\n            score: 0,\r\n            won: false,\r\n            over: false\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Loads that given state\r\n     * @param {object} gameState \r\n     */\r\n    loadGame(gameState) {\r\n        this.gameState = gameState;\r\n    };\r\n\r\n    /**\r\n     * Given \"up\", \"down\", \"left\", or \"right\" as string input, \r\n     *   it makes the appropriate shifts and adds a random tile\r\n     * @param {string} direction \r\n     */\r\n    move(direction) {\r\n        switch (direction) {\r\n            case 'left':\r\n                if (!this.gameState.over) {\r\n\r\n                    let boardAsRows = getBoardAsRows(this.gameState.board, this.size); // get the current board as rows\r\n                    let previousBoard = getBoardAsRows(this.gameState.board, this.size) // get the past board so we can compare after shift\r\n\r\n                    // combine the values\r\n                    combineLeftAndUp(boardAsRows, this.gameState);\r\n\r\n                    // see if any changes were made\r\n                    let noChange = boardAsRows.flat().every((value, index) => value === previousBoard.flat()[index]);\r\n\r\n                    if (!noChange) {\r\n                        // check if won\r\n                        let didWin = boardAsRows.flat().includes(2048)\r\n\r\n                        if (didWin) {\r\n                            this.gameState.board = boardAsRows.flat();\r\n                            handleWin(this.gameState, this.moveCallback, this.winCallback); // handles win process\r\n                        } else {\r\n\r\n                            lastStep(boardAsRows, this.gameState, this.size, this.moveCallback, this.loseCallback);\r\n\r\n                        }\r\n                    }\r\n                } \r\n                break;\r\n\r\n            case 'right':\r\n                if (!this.gameState.over) {\r\n\r\n                    let boardAsRows = getBoardAsRows(this.gameState.board, this.size); // get the current board as rows\r\n                    let previousBoard = getBoardAsRows(this.gameState.board, this.size) // get the past board so we can compare after shift\r\n\r\n                    // combine the values\r\n                    combineRightAndDown(boardAsRows, this.gameState);\r\n\r\n                    // see if any changes were made\r\n                    let noChange = boardAsRows.flat().every((value, index) => value === previousBoard.flat()[index]);\r\n\r\n                    if (!noChange) {\r\n                        // check if won\r\n                        let didWin = boardAsRows.flat().includes(2048)\r\n\r\n                        if (didWin) {\r\n                            this.gameState.board = boardAsRows.flat();\r\n                            handleWin(this.gameState, this.moveCallback, this.winCallback); // handles win process;\r\n                        } else {\r\n\r\n                            lastStep(boardAsRows, this.gameState, this.size, this.moveCallback, this.loseCallback);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'up':\r\n                if (!this.gameState.over) {\r\n\r\n                    let boardAsCols = getBoardAsCols(this.gameState.board, this.size); // get the current board as columns\r\n                    let previousBoard = getBoardAsCols(this.gameState.board, this.size) // get the past board so we can compare after shift\r\n\r\n                    // combine the values\r\n                    combineLeftAndUp(boardAsCols, this.gameState);\r\n\r\n                    // see if any changes were made\r\n                    let noChange = boardAsCols.flat().every((value, index) => value === previousBoard.flat()[index]);\r\n\r\n                    if (!noChange) {\r\n                        // check if won\r\n                        let didWin = boardAsCols.flat().includes(2048);\r\n\r\n                        if (didWin) {\r\n                            this.gameState.board = boardAsCols.flat();\r\n                            handleWin(this.gameState, this.moveCallback, this.winCallback); // handles win process\r\n                        } else {\r\n\r\n                            // rearrange the columns into rows\r\n                            let boardRearranged = rearrangeBoardFromColsToRows(boardAsCols, this.size);\r\n\r\n                            lastStep(boardRearranged, this.gameState, this.size, this.moveCallback, this.loseCallback);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'down':\r\n                if (!this.gameState.over) {\r\n\r\n                    let boardAsCols = getBoardAsCols(this.gameState.board, this.size); // get the current board as columns\r\n                    let previousBoard = getBoardAsCols(this.gameState.board, this.size) // get the past board so we can compare after shift\r\n\r\n                    // combine the values\r\n                    combineRightAndDown(boardAsCols, this.gameState);\r\n\r\n                    // see if any changes were made\r\n                    let noChange = boardAsCols.flat().every((value, index) => value === previousBoard.flat()[index]);\r\n\r\n                    if (!noChange) {\r\n                        // check if won\r\n                        let didWin = boardAsCols.flat().includes(2048);\r\n\r\n                        if (didWin) {\r\n                            this.gameState.board = rearrangeBoardFromColsToRows(boardAsCols, this.size).flat();\r\n                            handleWin(this.gameState, this.moveCallback, this.winCallback); // handles win process\r\n                        } else {\r\n\r\n                            // rearrange the columns into rows\r\n                            let boardRearranged = rearrangeBoardFromColsToRows(boardAsCols, this.size);\r\n\r\n                            lastStep(boardRearranged, this.gameState, this.size, this.moveCallback, this.loseCallback);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                // nothing\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Takes a callback function as input and registers that function as a listener to the move event.\r\n     * Every time a move is made, the game should call all previously registered move callbacks, \r\n     *   passing in the game's current gameState as an argument to the function.\r\n     * @param {function} callback \r\n     */\r\n    onMove(callback) {\r\n        this.moveCallback.push(callback);\r\n    };\r\n\r\n    /**\r\n     * Takes a callback function as input and registers that function as a listener to the move event.\r\n     * When the game transitions into a state where no more valid moves can be made, \r\n     *   the game should call all previously registered lose callbacks, \r\n     *   passing in the game's current gameState as an argument to the function.\r\n     * @param {function} callback \r\n     */\r\n    onLose(callback) {\r\n        this.loseCallback.push(callback);\r\n    };\r\n\r\n    /**\r\n     * Takes a callback function as input and registers that function as a listener to the win event. \r\n     * When the player wins the game (by making a 2048 tile), \r\n     *   the game should call all previously registered win callbacks, \r\n     *   passing in the game's current gameState as an argument to the function.\r\n     * @param {function} callback \r\n     */\r\n    onWin(callback) {\r\n        this.winCallback.push(callback);\r\n    };\r\n\r\n    /**\r\n     * Returns a accurate gameState object representing the current game state.\r\n     */\r\n    getGameState() {\r\n        return this.gameState;\r\n    };\r\n\r\n    /**\r\n     * Returns a string representation of the game as text/ascii\r\n     */\r\n    toString() {\r\n        let boardString = ``;\r\n        for (let index = 0; index < this.gameState.board.length; index++) {\r\n            if (index % this.size === 0) {\r\n                boardString += `\\n`;\r\n            }\r\n            if (this.gameState.board[index] === 0) {\r\n                boardString += ` [   ] `;\r\n            } else {\r\n                boardString += ` [ ${this.gameState.board[index]} ] `;\r\n            }\r\n        }\r\n\r\n        return `${boardString} \\nscore: ${this.gameState.score} \\nwon: ${this.gameState.won} \\nover: ${this.gameState.over}\\n`\r\n    };\r\n}\r\n\r\n// value array for a tile with 90% for a 2 and 10% for a 4 \r\nconst chances = new Array(10).fill(2);\r\nchances[0] = 4;\r\n\r\n/**\r\n * Function to add a new, random tile with a random value to the board\r\n * @param {number[]} board represents all the tiles and its value\r\n * @returns board with new tile added\r\n */\r\n export function addTile(board) {\r\n    const randomChoice = chances[Math.floor(Math.random() * chances.length)]; // get rand value\r\n\r\n    // find all indexes where value is 0\r\n    const filteredBoard = board.reduce((allIndex, tile, index) => {\r\n        if (tile === 0) {\r\n            allIndex.push(index);\r\n        }\r\n        return allIndex;\r\n    }, [])\r\n\r\n    if (filteredBoard.length !== 0) {\r\n        const randomIndex = filteredBoard[Math.floor(Math.random() * filteredBoard.length)];  // get rand index\r\n        board[randomIndex] = randomChoice;\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\n/**\r\n * Function to seperate the game board into seperate rows to make logic easier\r\n * @param {number[]} currentBoard represents the game board \r\n * @param {number} size represents the dimensions of the board\r\n * @returns an array of arrays with each arrays as a row\r\n */\r\n export function getBoardAsRows(currentBoard, size) {\r\n    let boardAsRows = [];\r\n    for (let index = 0; index < currentBoard.length; index += size) {\r\n        boardAsRows.push(currentBoard.slice(index, index + size));\r\n    }\r\n\r\n    return boardAsRows;\r\n}\r\n\r\n/**\r\n * Function to seperate the game board into seperate columns to make logic easier\r\n * @param {number[]} currentBoard represents the game board \r\n * @param {number} size represents the dimensions of the board \r\n * @returns an array of arrays with each arrays as a column\r\n */\r\n export function getBoardAsCols(currentBoard, size) {   // maybe need to confirm????\r\n    let boardAsCols = [];\r\n    for (let colNumber = 0; colNumber < size; colNumber++) {\r\n        let col = [];\r\n        for (let index = 0; index < currentBoard.length; index += size) {\r\n            col.push(currentBoard[index + colNumber])\r\n        }\r\n        boardAsCols.push(col);\r\n    }\r\n\r\n    return boardAsCols;\r\n}\r\n\r\n/**\r\n * Function to combine the values in a row starting at the left end\r\n * @param {number[]} board represents the game board \r\n * @param {object} gameState represents the game object\r\n */\r\n export function combineLeftAndUp(board, gameState) {\r\n    for (let rowNumber = 0; rowNumber < board.length; rowNumber++) {\r\n        let currentRow = board[rowNumber].filter(number => number); // creates new array without any zeros\r\n\r\n        // goes through the new array and does the shifting starting from the left\r\n        for (let index = 0; index < currentRow.length - 1; index++) {\r\n            if (currentRow[index] === currentRow[index + 1]) {\r\n                currentRow[index] += currentRow[index + 1];\r\n                gameState.score += currentRow[index];\r\n                currentRow[index + 1] = 0;\r\n                index++;\r\n            }\r\n        }\r\n\r\n        let combinedRow = currentRow.filter(number => number); // creates new array after combining with no zeros\r\n        let diff = board[rowNumber].length - combinedRow.length; // amount of zeros needed to add\r\n        board[rowNumber] = shiftLeftAndUp(combinedRow, diff) // adds the new zeros to the right \r\n    }\r\n}\r\n\r\n/**\r\n * Function to shift non zero numbers to left and adds zeros to the right\r\n * @param {number[]} currentRow represent the row that is being shifted\r\n * @param {number} diff represents the number of zeros needed to be added to shifted row  \r\n * @returns shifted array\r\n */\r\n export function shiftLeftAndUp(row, diff) {\r\n    let zerosToAdd = new Array(diff).fill(0);\r\n    return row.concat(zerosToAdd);\r\n}\r\n\r\n/**\r\n * Function to combine the values in a row starting at the right end\r\n * @param {number[]} board represents the game board \r\n * @param {object} gameState represents the game object\r\n */\r\n export function combineRightAndDown(board, gameState) {\r\n    for (let rowNumber = 0; rowNumber < board.length; rowNumber++) {\r\n        let currentRow = board[rowNumber].filter(number => number);// creates new array without any zeros\r\n\r\n        // goes through the new array and does the shifting starting from the right\r\n        for (let index = currentRow.length - 1; index >= 0; index--) {\r\n            if (currentRow[index] === currentRow[index - 1]) {\r\n                currentRow[index] += currentRow[index - 1];\r\n                gameState.score += currentRow[index];\r\n                currentRow[index - 1] = 0;\r\n                index--;\r\n            }\r\n        }\r\n\r\n        let combinedRow = currentRow.filter(number => number); // creates new array after combining with no zeros\r\n        let diff = board[rowNumber].length - combinedRow.length; // amount of zeros needed to add\r\n        board[rowNumber] = shiftRightAndDown(combinedRow, diff) // adds the new zeros to the right \r\n    }\r\n}\r\n\r\n/**\r\n * Function to shift non zero numbers to right and adds zeros to the left\r\n * @param {number[]} currentRow represent the row that is being shifted\r\n * @param {number} diff represents the number of zeros needed to be added to shifted row  \r\n * @returns shifted array\r\n */\r\n export function shiftRightAndDown(currentRow, diff) {\r\n    let zerosToAdd = new Array(diff).fill(0);\r\n    return zerosToAdd.concat(currentRow);\r\n}\r\n\r\n/**\r\n * Function to rearrange the board in the state of columns into the state of rows\r\n * @param {number[]} boardAsCols represents the current board in the state of columns\r\n * @param {number} size the dimensions of the board\r\n * @returns an array of arrays with the arrays as rows\r\n */\r\n export function rearrangeBoardFromColsToRows(boardAsCols, size) {\r\n    let boardRearranged = [];\r\n    for (let indexOfArray = 0; indexOfArray < size; indexOfArray++) {\r\n        let row = [];\r\n        for (let currentArray = 0; currentArray < size; currentArray++) {\r\n            row.push(boardAsCols[currentArray][indexOfArray]);\r\n        }\r\n        boardRearranged.push(row);\r\n    }\r\n\r\n    return boardRearranged;\r\n}\r\n\r\n/**\r\n * Function to check if any other possible moves are available\r\n * @param {number[]} board represents the game board \r\n * @returns boolean true if any other moves are possible, false if none\r\n */\r\n export function anyOtherMoves(board, size) {\r\n    let boardAsRows = getBoardAsRows(board, size);\r\n    let boardAsCols = getBoardAsCols(board, size);\r\n\r\n    for (let rowNumber = 0; rowNumber < boardAsRows.length; rowNumber++) {\r\n        let currentRow = boardAsRows[rowNumber];\r\n        let currentCol = boardAsCols[rowNumber];\r\n        for (let index = 0; index < boardAsRows.length - 1; index++) {\r\n            if (currentRow[index] === currentRow[index + 1] || currentCol[index] === currentCol[index + 1]) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Function to process the last steps after a move\r\n *   Either the move was valid and we update the board\r\n *   or no change was made and the board was left the same\r\n *   or there are no possible moves left   \r\n * @param {number[]} board represents the game board \r\n * @param {object} gameState represents the game state\r\n * @param {number} size represents the dimensions of the board \r\n * @param {function} moveCallback represents the callback function for move \r\n * @param {function} loseCallback represents the callback function for lose\r\n */\r\n export function lastStep(board, gameState, size, moveCallback, loseCallback) {\r\n    // compare shifted and combined board with adding one new tile\r\n    let tileAddedBoard = addTile(board.flat());\r\n    let isSame = tileAddedBoard.every((value, index) => value === board.flat()[index]);\r\n\r\n    if (!isSame) {\r\n        gameState.board = tileAddedBoard;\r\n\r\n        if (!anyOtherMoves(tileAddedBoard, size) && tileAddedBoard.filter(number => number === 0).length === 0) {\r\n            handleLose(gameState, moveCallback, loseCallback);\r\n        } else {\r\n            moveCallback.forEach(callback => {\r\n                callback(gameState);\r\n            });\r\n        }\r\n\r\n    } else {\r\n\r\n        if (!anyOtherMoves(tileAddedBoard, size) && tileAddedBoard.filter(number => number === 0).length === 0) {\r\n            handleLose(gameState, moveCallback, loseCallback);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Function to handle win process\r\n * @param {object} gameState represents the game state \r\n * @param {function} moveCallback represents the callback function for move \r\n * @param {function} winCallback represents the callback function for win\r\n */\r\n export function handleWin(gameState, moveCallback, winCallback) {\r\n    gameState.won = true;\r\n    moveCallback.forEach(callback => {\r\n        callback(gameState);\r\n    });\r\n    winCallback.forEach(callback => {\r\n        callback(gameState);\r\n    })\r\n}\r\n\r\n/**\r\n * Function to handle lose process\r\n * @param {*} gameState represents the game state\r\n * @param {function} moveCallback represents the callback function for move \r\n * @param {function} loseCallback represents the callback function for lose\r\n */\r\n export function handleLose(gameState, moveCallback, loseCallback) {\r\n    gameState.over = true;\r\n    moveCallback.forEach(callback => {\r\n        callback(gameState);\r\n    });\r\n    loseCallback.forEach(callback => {\r\n        callback(gameState);\r\n    })\r\n}","import React from 'react'\r\n\r\nexport const Tile = ({ value }) => {\r\n\r\n    return (\r\n        <div className=\"rounded-md border-solid border-4 text-4xl font-medium\">\r\n            {\r\n               renderSwitch(value)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction renderSwitch(value) {\r\n\r\n    switch(value) {\r\n        case 2:\r\n            return <div className=\"tile-space bg-red-400\"><span>{value}</span></div>;\r\n        case 4:\r\n            return <div className=\"tile-space bg-red-600\"><span>{value}</span></div>;\r\n        case 8:\r\n            return <div className=\"tile-space bg-yellow-400\"><span>{value}</span></div>;\r\n        case 16:\r\n            return <div className=\"tile-space bg-yellow-600\"><span>{value}</span></div>;\r\n        case 32:\r\n            return <div className=\"tile-space bg-green-500\"><span>{value}</span></div>;\r\n        case 64:\r\n            return <div className=\"tile-space bg-green-700\"><span>{value}</span></div>;\r\n        case 128:\r\n            return <div className=\"tile-space bg-indigo-400\"><span>{value}</span></div>;\r\n        case 256:\r\n            return <div className=\"tile-space bg-indigo-600\"><span>{value}</span></div>;\r\n        case 512:\r\n            return <div className=\"tile-space bg-blue-800\"><span>{value}</span></div>;\r\n        case 1024:\r\n            return <div className=\"tile-space text-3xl bg-purple-800\"><span>{value}</span></div>;\r\n        case 2048:\r\n            return <div className=\"tile-space text-3xl bg-gray-100 text-black\"><span>{value}</span></div>;\r\n        default:\r\n            return <div className=\"tile-space px-6 py-9\">{''}</div>;\r\n    }\r\n};\r\n","import React, { useState } from 'react'\nimport Game from './engine/game.js';\nimport { Tile } from './Components/Tile.js';\n\nfunction App() {\n\n  const game = new Game(4);\n\n  const [gameModel, updateGameModel] = useState(game);\n  const [board, updateBoard] = useState(game.gameState.board);\n  const [gameState, updateGameState] = useState(game.gameState);\n\n  const handleMove = (event) => {\n    event.preventDefault();\n\n    switch (event.key) {\n      case 'ArrowUp':\n        gameModel.move(\"up\")\n        updateGameModel(gameModel);\n        updateGameState(gameModel.gameState);\n        updateBoard(gameState.board);\n        break;\n      case 'ArrowLeft':\n        gameModel.move(\"left\")\n        updateGameModel(gameModel);\n        updateGameState(gameModel.gameState);\n        updateBoard(gameState.board);\n        break;\n      case 'ArrowRight':\n        gameModel.move(\"right\")\n        updateGameModel(gameModel);\n        updateGameState(gameModel.gameState);\n        updateBoard(gameState.board);\n        break;\n      case 'ArrowDown':\n        gameModel.move(\"down\")\n        updateGameModel(gameModel);\n        updateGameState(gameModel.gameState);\n        updateBoard(gameState.board);\n        break;\n      case 'r':\n        handleReset();\n        break;\n      default:\n        break;\n    }\n  }\n\n  const handleReset = () => {\n    gameModel.setupNewGame();\n    updateGameModel(gameModel);\n    updateGameState(gameModel.gameState);\n    updateBoard(gameModel.gameState.board);\n  }\n\n  return (\n    <div className=\"outer-container bg-primary flex flex-wrap content-center justify-center text-center\" tabIndex=\"1\" onKeyDown={handleMove}>\n      <div className=\"space-y-6\">\n        <h1 className=\"text-5xl font-black font-title\">2048</h1>\n        <div className=\"inner-container\">\n          <div className=\"ml-6 grid-rows-4\">\n            <h1 className=\"text-3xl pb-4 font-bold w-40\">Score: {gameState.score}</h1>\n            <h1 className=\"text-3xl pb-4 font-semibold\">{gameState.over ? \"Game Over\" : \"\"}</h1>\n            <h1 className=\"text-3xl pb-4 font-semibold\">{gameState.won ? \"You won\" : \"\"}</h1>\n            <button className=\"border-solid border-2 p-2 rounded font-medium\" onClick={handleReset}>RESET</button>\n          </div>\n          <div className=\"grid grid-cols-4 gap-2 rounded-sm\"  >\n            {\n              board.map((tile, index) => {\n                return (\n                  <div key={index}>\n                    <Tile value={tile} />\n                  </div>\n                )\n              })\n            }\n          </div>\n        </div>\n        <div className=\"\">\n          <h1 className=\"text-3xl p-6 pb-2 pt-0\">How To Play</h1>\n          <p className=\"container mx-auto text-center\">Use your <strong>arrow keys</strong> to move the tiles. Press <strong>r</strong> to reset.\n           Tiles with the <strong>same number</strong> merge into one when they touch.\n           Add them up to reach <strong>2048</strong>!</p>\n        </div>\n        <footer className=\"flex justify-evenly\">\n          <h1>Created by: <span className=\"font-title text-red-400\">Minh Truong</span></h1>\n          <a className=\"underline text-red-400\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/minh100/2048\">Github</a>\n        </footer>\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}